Question 1
Given an integer array nums of length n and an integer target, find three integers
in nums such that the sum is closest to the target. Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1: Input: nums = [-1,2,1,-4], target = 1 Output: 2

Algorithm
1. Sort the array nums in ascending order. This will allow us to easily manipulate the elements to find the closest sum.
2. Initialize a variable closestSum to keep track of the closest sum encountered so far. Set it to a large value initially.
3. Iterate over the array nums from the beginning to the third-to-last element:
4. Within this iteration, initialize two pointers, left and right, which will point to elements on the right side of the current element.
5. While the left pointer is smaller than the right pointer:
    Calculate the current sum by adding the values at indices i, left, and right: currentSum = nums[i] + nums[left] + nums[right].
    Check if the absolute difference between the currentSum and the target is smaller than the absolute difference between the closestSum and the target. If so, update closestSum to currentSum.
    If the currentSum is greater than the target, decrement the right pointer to explore smaller values.
    If the currentSum is smaller than the target, increment the left pointer to explore larger values.
    If the currentSum is equal to the target, return target as the closest sum since it cannot be improved upon.
6.After the iteration, return closestSum as the sum of the three integers closest to the target.
def threeSumClosest(nums, target):
    nums.sort()
    n = len(nums)
    closestSum = float('inf')

    for i in range(n - 2):
        left = i + 1
        right = n - 1

        while left < right:
            currentSum = nums[i] + nums[left] + nums[right]
            if currentSum == target:
                return target

            if abs(currentSum - target) < abs(closestSum - target):
                closestSum = currentSum

            if currentSum > target:
                right -= 1
            else:
                left += 1

    return closestSum
nums = [-1, 2, 1, -4]
target = 1

print(threeSumClosest(nums, target))
2
Question 2
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that: ● 0 <= a, b, c, d < n ● a, b, c, and d are distinct. ● nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

Example 1: Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Algorithm
1.Sort the array nums in ascending order. This will help us avoid duplicates and simplify the process.
2.Initialize an empty list result to store the unique quadruplets.
3.Iterate over the array nums from the beginning to the fourth-to-last element:
4.. Check if the current element is equal to the previous element. If so, skip the current iteration to avoid duplicates.
5.. Within this iteration, iterate over the array nums starting from the element following the first iteration to the fifth-to-last element:
    Check if the current element is equal to the previous element. If so, skip the current iteration to avoid duplicates.
    Initialize two pointers, left and right, which will point to elements on the right side of the current two elements.
    While the left pointer is smaller than the right pointer:
        Calculate the current sum by adding the values at indices i, j, left, and right: currentSum = nums[i] + nums[j] + nums[left] + nums[right].
        If the currentSum is equal to the target, add the quadruplet [nums[i], nums[j], nums[left], nums[right]] to the result list.
        If the currentSum is greater than the target, decrement the right pointer to explore smaller values.
        If the currentSum is smaller than the target, increment the left pointer to explore larger values.
6.After the iterations, return the result list containing all the unique quadruplets.
def fourSum(nums, target):
    nums.sort() #Sort the array nums in ascending order.
    n = len(nums)
    result = [] #Initialize an empty list result

    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left = j + 1
            right = n - 1

            while left < right:
                currentSum = nums[i] + nums[j] + nums[left] + nums[right]
                if currentSum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])

                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1

                    left += 1
                    right -= 1
                elif currentSum < target:
                    left += 1
                else:
                    right -= 1

    return result
nums = [1, 0, -1, 0, -2, 2]
target = 0

print(fourSum(nums, target))
[[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
Question 3
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such an arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

● For example, the next permutation of arr = [1,2,3] is [1,3,2]. ● Similarly, the next permutation of arr = [2,3,1] is [3,1,2]. ● While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums. The replacement must be in place and use only constant extra memory.

Example 1: Input: nums = [1,2,3] Output: [1,3,2]

Algorithm
Start from the rightmost element of the array and move towards the left until we find a pair of adjacent elements where the left element is smaller than the right element. Let's call the index of the left element i.
2.If no such pair is found, it means the given permutation is the highest possible order. In this case, we need to rearrange the array to its lowest possible order, which is the sorted array in ascending order. We can achieve this by reversing the entire array. 3.If a pair is found in step 1, we need to find the next lexicographically greater permutation. Starting from the right end of the array, find the first element that is greater than the element at index i. Let's call this index j. Swap the elements at indices i and j. Reverse the subarray from index i+1 to the end of the array. 4. After performing steps 2 or 3, the array nums will represent the next permutation.

def nextPermutation(nums):
    n = len(nums)
    i = n - 2

    while i >= 0 and nums[i] >= nums[i + 1]:
        i -= 1

    if i >= 0:
        j = n - 1
        while j > i and nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]

    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1
nums = [1, 2, 3]
nextPermutation(nums)
print(nums)
[1, 3, 2]
Question 4
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1: Input: nums = [1,3,5,6], target = 5 Output: 2

Alglorithm
1.Initialize two pointers, left and right, pointing to the start and end of the array respectively.
2.While left is less than or equal to right:
 Calculate the middle index as mid = (left + right) // 2.
3.Compare the value at index mid with the target value:
    If nums[mid] is equal to the target, return mid as the index where the target is found.
    If nums[mid] is greater than the target, update right to mid - 1 to search in the left half of the array.
    If nums[mid] is less than the target, update left to mid + 1 to search in the right half of the array.
4. If the target is not found in the array, return left as the index where it would be inserted.
def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left
nums = [1, 3, 5, 6]
target = 5
print(searchInsert(nums, target))
2
Question 5
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1: Input: digits = [1,2,3] Output: [1,2,4]

Algorithm
1.Start from the least significant digit (rightmost digit) and move towards the most significant digit (leftmost digit).
2.Initialize a carry variable as 1, representing the carry when incrementing the least significant digit.
3.Iterate over the digits array from right to left:
    Add the current digit with the carry.
    Calculate the new digit by taking the sum modulo 10.
    Update the carry by taking the sum divided by 10.
    Update the current digit in the array with the new digit.
    If the carry becomes zero, we can stop iterating since there is no need to carry over to the next digit.
4.After the iteration, if the carry is still non-zero, it means we need to add an additional digit at the most significant position. Append the carry to the beginning of the digits array.
5.Return the modified digits array.
def plusOne(digits):
    n = len(digits)
    carry = 1

    for i in range(n - 1, -1, -1):
        digits[i] += carry
        carry = digits[i] // 10
        digits[i] %= 10

        if carry == 0:
            break

    if carry != 0:
        digits.insert(0, carry)

    return digits
digits = [1, 2, 3]
print(plusOne(digits))
[1, 2, 4]
Question 6
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1: Input: nums = [2,2,1] Output: 1

def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num #^ XOR operation
    return result
nums = [2, 2, 1]
print(singleNumber(nums))
1
Question 7
You are given an inclusive range [lower, upper] and a sorted unique integer array
nums, where all elements are within the inclusive range. A number x is considered missing if x is in the range [lower, upper] and x is not in nums. Return the shortest sorted list of ranges that exactly covers all the missing numbers. That is, no element of nums is included in any of the ranges, and each missing number is covered by one of the ranges.

Example 1: Input: nums = [0,1,3,50,75], lower = 0, upper = 99 Output: [[2,2],[4,49],[51,74],[76,99]]

Algorithm
1.Initialize an empty list result to store the ranges.
2.Initialize a variable start to lower, representing the start of the current range.
3.Iterate over the elements in nums:
    If the current element is equal to or greater than start, update start to the next number after the current element.
    If the current element is greater than start, there is a missing number in the range [start, current element - 1]. Append this range to the result list.
After the iteration, if start is less than or equal to upper, there is a missing number from start to upper. Append this range to the result list.
Return the result list.
def findMissingRanges(nums, lower, upper):
    result = []
    start = lower

    for num in nums:
        if num > start:
            result.append([start, num - 1])
        start = num + 1

    if start <= upper:
        result.append([start, upper])

    return result
nums = [0, 1, 3, 50, 75]
lower = 0
upper = 99
print(findMissingRanges(nums, lower, upper))
[[2, 2], [4, 49], [51, 74], [76, 99]]
Question 8
Given an array of meeting time intervals where intervals[i] = [starti, endi],
determine if a person could attend all meetings.

Example 1: Input: intervals = [[0,30],[5,10],[15,20]] Output: false

Algorithm
Sort the intervals based on the start time.
Iterate over the sorted intervals starting from the second interval. If the start time of the current interval is less than or equal to the end time of the previous interval, there is an overlap. Return False.
3.If the iteration completes without finding any overlaps, return True.

def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False

    return True
intervals = [[0, 30], [5, 10], [15, 20]]
print(canAttendMeetings(intervals))
False
 
 
 
