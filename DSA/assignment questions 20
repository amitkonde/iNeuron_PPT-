Question-1
Given a binary tree, your task is to find subtree with maximum sum in tree.
Examples:

Input1 :

   1

 /   \

2      3

/ \    / \

4   5  6   7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

1

 /    \

-2      3

/ \    /  \

4   5  -6   2

Output2 : 7

Subtree with largest sum is :

-2

/ \

4   5

Also, entire tree sum is also 7.

Algorithm
Define a recursive function subtreeSum(node) that takes a node as input and returns the sum of the subtree rooted at that node.

Inside the subtreeSum function:

If the node is None, return 0.

Recursively calculate the sum of the left subtree by calling subtreeSum(node.left).

Recursively calculate the sum of the right subtree by calling subtreeSum(node.right).

Calculate the sum of the current subtree as the sum of the node's value, the sum of the left subtree, and the sum of the right subtree.

Update a variable max_sum to keep track of the maximum sum encountered so far.

Update max_sum if the current subtree sum is larger.

Return the sum of the current subtree to be used by the parent node.

Initialize max_sum as negative infinity.

Call the subtreeSum function with the root of the binary tree.

Return the value of max_sum as the maximum sum of a subtree in the binary tree.

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxSubtreeSum(root):
    def subtreeSum(node):
        nonlocal max_sum

        if node is None:
            return 0

        left_sum = subtreeSum(node.left)
        right_sum = subtreeSum(node.right)

        # Calculate the sum of the subtree rooted at the current node
        current_sum = node.val + left_sum + right_sum

        # Update the maximum sum if the current subtree has a larger sum
        max_sum = max(max_sum, current_sum)

        # Return the sum of the current subtree to be used by the parent node
        return current_sum

    max_sum = float('-inf') #initializes the variable max_sum with a value of negative infinity.
    subtreeSum(root)
    return max_sum
# Create the first tree 
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

# Calculate the subtree with the maximum sum
max_sum = maxSubtreeSum(root)
print(max_sum)  
28
Question-2
Construct the BST (Binary Search Tree) from its given level order traversal.
Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

        7

     /    \

   4     12

 /  \     /

3   6  8

/   /   \

1  5   10

Algorithm
Create an empty root node.

Initialize an empty queue.

Initialize the root node with the first element of the level order traversal array.

Enqueue the root node into the queue.

Iterate through the remaining elements of the level order traversal array from index 1:

Create a new node with the current element as its value.

Dequeue a node from the queue and assign it as the parent node.

If the left child of the parent node is empty, assign the new node as the left child.

Otherwise, assign the new node as the right child.

Enqueue the new node into the queue.

Return the root node of the constructed BST.

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def constructBST(arr):
    if len(arr) == 0:
        return None

    root = Node(arr[0])
    queue = [root]
    i = 1

    while i < len(arr):
        node = queue.pop(0)
        if i < len(arr) and arr[i] < node.data:
            node.left = Node(arr[i])
            queue.append(node.left)
            i += 1
        if i < len(arr) and arr[i] > node.data:
            node.right = Node(arr[i])
            queue.append(node.right)
            i += 1

    return root


def inorderTraversal(node):
    if node is not None:
        inorderTraversal(node.left)
        print(node.data, end=" ")
        inorderTraversal(node.right)

arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
root = constructBST(arr)
inorderTraversal(root)
1 3 5 4 6 10 7 8 12 
Question-3
Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.
Examples:

Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output1 : Yes

For the given arr[], the Binary Search Tree is:

        7

     /    \

   4     12

 /  \     /

3   6  8

/   /   \

1  5   10

Input2 : arr[] = {11, 6, 13, 5, 12, 10}

Output2 : No

The given arr[] does not represent the level order traversal of a BST.

Algorithm
Initialize n as the length of the input array arr.

If n is 0, return True as an empty array can represent a BST.

Initialize i as 0.

Iterate while i is less than n:

Compute the indices of the left child and right child of the current node: left_child = 2 * i + 1 and right_child = 2 * i + 2.

Check if the left child is within the array bounds and its value is greater than the current node's value. If true, return False as it violates the BST property.

Check if the right child is within the array bounds and its value is less than the current node's value. If true, return False as it violates the BST property.

Increment i by 1.

If the loop completes without returning False, return True as the array represents a valid level order traversal of a BST.

def isLevelOrderBST(arr):
    if not arr:
        return False

    n = len(arr)
    for i in range(n):
        left_child = 2 * i + 1
        right_child = 2 * i + 2

        if left_child < n and arr[left_child] > arr[i]:
            return False

        if right_child < n and arr[right_child] < arr[i]:
            return False

    return True

arr1 = [7, 4, 12, 3, 6, 8, 1, 5, 10]
print(isLevelOrderBST(arr1))

arr2 = [11, 6, 13, 5, 12, 10]
print(isLevelOrderBST(arr2)) 
False
True
 
 
