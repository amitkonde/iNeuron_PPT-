Assignment 22 - Tree
Question-1:
Given a Binary Tree (Bt), convert it to a Doubly Linked List(DLL). The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as in Inorder for the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.
Example:
Untitled

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.prev = None
        self.next = None


def inorderTraversal(root):
    if root is None:
        return []

    left_subtree = inorderTraversal(root.left)
    current_node = [root]
    right_subtree = inorderTraversal(root.right)

    return left_subtree + current_node + right_subtree


def convertToDLL(root):
    if root is None:
        return None

    # Convert the left subtree
    left_subtree = convertToDLL(root.left)

    # Find the rightmost node of the left subtree
    rightmost = left_subtree
    while rightmost is not None and rightmost.next is not None:
        rightmost = rightmost.next

    # Set the prev and next pointers
    if left_subtree is not None:
        rightmost.next = root
        root.prev = rightmost

    # Convert the right subtree
    right_subtree = convertToDLL(root.right)

    # Set the prev and next pointers
    if right_subtree is not None:
        right_subtree.prev = root
        root.next = right_subtree

    # Return the head of the DLL
    return left_subtree if left_subtree else root


# Construct the binary tree
root = Node(10)
root.left = Node(5)
root.right = Node(20)
root.right.left = Node(30)
root.right.right = Node(35)

# Convert the binary tree to DLL
head = convertToDLL(root)

# Traverse and print the DLL
current = head
while current:
    print(current.data, end=" ")
    current = current.next
5 10 30 20 35 
Question-2
A Given a binary tree, the task is to flip the binary tree towards the right direction that is clockwise. See the below examples to see the transformation.
In the flip operation, the leftmost node becomes the root of the flipped tree and its parent becomes its right child and the right sibling becomes its left child and the same should be done for all left most nodes recursively.
Example1:
Untitled

Example2:

Untitled

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def flipBinaryTree(root):
    if root is None:
        return None

    # If current node is a leaf node, return the node itself
    if root.left is None and root.right is None:
        return root

    # Recursively flip the left and right subtrees
    flipped_left = flipBinaryTree(root.left)
    flipped_right = flipBinaryTree(root.right)

    # Set left child as None and right child as flipped left subtree
    root.left = None
    root.right = flipped_left

    # Find the rightmost node in the flipped left subtree
    rightmost = flipped_left
    while rightmost.right is not None:
        rightmost = rightmost.right

    # Set the right child of the rightmost node as the flipped right subtree
    rightmost.right = flipped_right

    return root


# Construct the binary tree
root = Node(1)
root.left = Node(2)
root.left.left = Node(4)
root.left.right = Node(5)
root.right = Node(3)

# Flip the binary tree
flipped_root = flipBinaryTree(root)

# Print the flipped tree (inorder traversal)
def inorderTraversal(root):
    if root is None:
        return []

    left_subtree = inorderTraversal(root.left)
    current_node = [root.data]
    right_subtree = inorderTraversal(root.right)

    return left_subtree + current_node + right_subtree

flipped_tree_values = inorderTraversal(flipped_root)
print(flipped_tree_values)
[1, 2, 4, 5, 3]
Question-3:
Given a binary tree, print all its root-to-leaf paths without using recursion. For example, consider the following Binary Tree.
Input:
        6
     /    \
    3      5
  /   \     \
 2     5     4
     /   \
    7     4
Output:
There are 4 leaves, hence 4 root to leaf paths -
  6->3->2
  6->3->5->7
  6->3->5->4
  6->5>4
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def printRootToLeafPaths(root):
    if root is None:
        return

    stack = [(root, "")]
    while stack:
        node, path = stack.pop()
        path += str(node.data)

        if node.left is None and node.right is None:
            print(path)
        if node.right:
            stack.append((node.right, path + "->"))
        if node.left:
            stack.append((node.left, path + "->"))


# Construct the binary tree
root = Node(6)
root.left = Node(3)
root.left.left = Node(2)
root.left.right = Node(5)
root.left.right.left = Node(7)
root.left.right.right = Node(4)
root.right = Node(5)
root.right.right = Node(4)

# Print all root-to-leaf paths
printRootToLeafPaths(root)
6->3->2
6->3->5->7
6->3->5->4
6->5->4
Question-4:
Given Preorder, Inorder and Postorder traversals of some tree. Write a program to check if they all are of the same tree.
Examples:
Input :
    Inorder -> 4 2 5 1 3
    Preorder -> 1 2 4 5 3
    Postorder -> 4 5 2 3 1
Output :
Yes
Explanation :
All of the above three traversals are of
the same tree
                           1
                         /   \
                        2     3
                      /   \
                     4     5
Input :
Inorder -> 4 2 5 1 3
Preorder -> 1 5 4 2 3
Postorder -> 4 1 2 3 5

Output : 

No
def isSameTree(inorder, preorder, postorder):
    if len(inorder) != len(preorder) != len(postorder):
        return False

    if len(inorder) == 0:
        return True

    if preorder[0] != postorder[-1]:
        return False

    root_index = inorder.index(preorder[0])

    left_inorder = inorder[:root_index]
    left_preorder = preorder[1:root_index + 1]
    left_postorder = postorder[:root_index]

    right_inorder = inorder[root_index + 1:]
    right_preorder = preorder[root_index + 1:]
    right_postorder = postorder[root_index:-1]

    return isSameTree(left_inorder, left_preorder, left_postorder) and \
           isSameTree(right_inorder, right_preorder, right_postorder)


inorder1 = [4, 2, 5, 1, 3]
preorder1 = [1, 2, 4, 5, 3]
postorder1 = [4, 5, 2, 3, 1]
print(isSameTree(inorder1, preorder1, postorder1)) 

inorder2 = [4, 2, 5, 1, 3]
preorder2 = [1, 5, 4, 2, 3]
postorder2 = [4, 1, 2, 3, 5]
print(isSameTree(inorder2, preorder2, postorder2))  
True
False
