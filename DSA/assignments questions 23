Assignment 23 - Heaps and Hashing
Question-1:
Given preorder of a binary tree, calculate its depth(or height) [starting from depth 0]. The preorder is given as a string with two possible characters.
‘l’ denotes the leaf
‘n’ denotes internal node
The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can ‘n’ or ‘l’ or mix of both.
Examples :
Input  : nlnll
Output : 2
Explanation :

Untitled

Input  : nlnnlll
Output : 3
Untitled

# Function to calculate the depth of a binary tree
def calculate_depth(preorder):
    # Base case: if the preorder is empty, return -1 (no nodes)
    if not preorder:
        return -1
    
    # Initialize the depth as 0
    depth = 0
    
    # Recursive case:
    # If the first character is 'l', it represents a leaf node, so return 0
    # Otherwise, it represents an internal node, so increment the depth and recursively calculate the depth of the left and right subtrees
    if preorder[0] == 'l':
        return depth
    else:
        depth += 1
        # Find the index of the first occurrence of 'l' or end of the string
        index = 1
        while index < len(preorder) and preorder[index] != 'l':
            index += 1
        
        # Recursively calculate the depth of the left and right subtrees
        left_depth = calculate_depth(preorder[1:index])
        right_depth = calculate_depth(preorder[index:])
        
        # Return the maximum depth among the left and right subtrees
        return depth + max(left_depth, right_depth)

preorder = 'nlnll'
depth = calculate_depth(preorder)
print("Depth of the binary tree:", depth)
Depth of the binary tree: 1
Question-2
Question-2:
Given a Binary tree, the task is to print the left view of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.
Examples:
*Input:*
            4

          /   \

        5     2

             /   \

            3     1

           /  \

          6    7

Output: 4 5 3 6*
*Input:*
                    1

                  /   \

                2       3

                 \

                   4

                     \

                        5

                           \

                             6

Output: 1 2 4 5 6
# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Function to print the left view of a binary tree
def print_left_view(root):
    if root is None:
        return
    
    # Use a list to store the maximum level reached so far
    max_level = [0]
    
    # Recursive helper function to traverse the tree and print the left view
    def print_left_view_helper(node, level):
        if node is None:
            return
        
        # If the current level is greater than the maximum level reached so far,
        # print the data and update the maximum level
        if level > max_level[0]:
            print(node.data, end=" ")
            max_level[0] = level
        
        # Recursively traverse the left and right subtrees
        print_left_view_helper(node.left, level + 1)
        print_left_view_helper(node.right, level + 1)
    
    # Call the helper function to print the left view of the tree
    print_left_view_helper(root, 1)


# Create the binary tree
root = Node(4)
root.left = Node(5)
root.right = Node(2)
root.right.left = Node(3)
root.right.right = Node(1)
root.right.left.left = Node(6)
root.right.left.right = Node(7)

# Print the left view of the binary tree
print("Left view of the binary tree:")
print_left_view(root)
Left view of the binary tree:
4 5 3 6 
Question-3:
Given a Binary Tree, print the Right view of it.
The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.
Examples:
Input:
            1

         /     \

      2         3

   /   \       /  \

 4       5   6      7

               \

                 8
Output:
Right view of the tree is 1 3 7 8
Input:
         1

       /

    8

  /

7
Output:
Right view of the tree is 1 8 7
# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Function to print the right view of a binary tree
def print_right_view(root):
    if root is None:
        return
    
    # Use a list to store the maximum level reached so far
    max_level = [0]
    
    # Recursive helper function to traverse the tree and print the right view
    def print_right_view_helper(node, level):
        if node is None:
            return
        
        # If the current level is greater than the maximum level reached so far,
        # print the data and update the maximum level
        if level > max_level[0]:
            print(node.data, end=" ")
            max_level[0] = level
        
        # Recursively traverse the right and left subtrees
        print_right_view_helper(node.right, level + 1)
        print_right_view_helper(node.left, level + 1)
    
    # Call the helper function to print the right view of the tree
    print_right_view_helper(root, 1)


# Create the binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.right.right = Node(8)

# Print the right view of the binary tree
print("Right view of the binary tree:")
print_right_view(root)
Right view of the binary tree:
1 3 7 8 
Question-4:
Given a Binary Tree, The task is to print the bottom view from left to right. A node x is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.
Examples:
Input:
             20

           /     \

        8         22

    /      \         \

   5         3        25

           /    \

        10       14
Output: 5, 10, 3, 14, 25.
Input:
             20

           /     \

        8         22

    /      \      /   \

  5         3    4     25

         /    \

       10       14
Output:
5 10 4 14 25.

Explanation:
If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.
3 and 4 are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.
# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Function to print the bottom view of a binary tree
def print_bottom_view(root):
    if root is None:
        return
    
    # Create a map to track the horizontal distance of each node
    horizontal_distance_map = {}
    
    # Create a queue for level order traversal
    queue = []
    
    # Enqueue the root node along with its horizontal distance
    queue.append((root, 0))
    
    # Perform level order traversal
    while queue:
        node, horizontal_distance = queue.pop(0)
        
        # Update the horizontal distance in the map for each node
        horizontal_distance_map[horizontal_distance] = node.data
        
        # Enqueue the left child with a horizontal distance of (horizontal_distance - 1)
        if node.left:
            queue.append((node.left, horizontal_distance - 1))
        
        # Enqueue the right child with a horizontal distance of (horizontal_distance + 1)
        if node.right:
            queue.append((node.right, horizontal_distance + 1))
    
    # Print the values in the map in ascending order of the horizontal distance
    for distance in sorted(horizontal_distance_map):
        print(horizontal_distance_map[distance], end=" ")


# Create the binary tree 
root = Node(20)
root.left = Node(8)
root.right = Node(22)
root.left.left = Node(5)
root.left.right = Node(3)
root.right.right = Node(25)
root.left.right.left = Node(10)
root.left.right.right = Node(14)

# Print the bottom view of the binary tree
print("Bottom view of the binary tree:")
print_bottom_view(root)
Bottom view of the binary tree:
5 10 3 14 25 
