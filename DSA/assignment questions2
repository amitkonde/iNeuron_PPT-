Question 1
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

Algorithm
Sort the given array nums in ascending order. After sorting nums = [1, 2, 3, 4].

Initialize a variable max_sum to store the sum of the minimum values.

Iterate over the sorted array by skipping one element at a time. Start with i = 0 and increment i by 2 in each iteration. In each iteration, add nums[i] (which represents the minimum value in the pair) to max_sum.

Return max_sum as the result.

def array_pair_sum(nums):
    nums.sort()
    max_sum = 0
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
    return max_sum

nums = [1, 4, 3, 2]
print(array_pair_sum(nums))
4
Question 2
Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.
The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

Example 1: Input: candyType = [1,1,2,2,3,3] Output: 3

Algorithm
1.Initialize a set unique_candies to store the distinct types of candies.
2.Iterate over the candy types in the array candyType.
    Add each candy type to the unique_candies set.
Calculate the limit of candies Alice can eat: limit = len(candyType) // 2.
Return the minimum of the limit limit and the number of unique candies len(unique_candies). This ensures that if Alice has fewer unique candies than the limit, she can eat all of them. Otherwise, she can only eat the limit number of unique candies.
def max_candies(candyType):
    unique_candies = set(candyType)
    limit = len(candyType) // 2
    return min(limit, len(unique_candies))

candyType = [1, 1, 2, 2, 3, 3]
print(max_candies(candyType))
3
Question 3
We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.
Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Example 1: Input: nums = [1,3,2,2,5,2,3,7] Output: 5

Algorithm
Initialize a dictionary counter to keep track of the count of each number in the array.
Iterate over the numbers in the array nums and update the count in the counter dictionary.
Initialize a variable max_length to 0, which will store the maximum length of the harmonious subsequence.
Iterate over the unique numbers in the array nums (obtained from the keys of the counter dictionary).
For each unique number num, check if num + 1 exists in the counter dictionary. If it does, calculate the length of the harmonious subsequence starting from num as length = counter[num] + counter[num + 1].
Update max_length if the calculated length is greater than max_length.
Return max_length as the result.
from collections import Counter

def findLHS(nums):
    counter = Counter(nums)
    max_length = 0

    for num in set(nums):
        if num + 1 in counter:
            length = counter[num] + counter[num + 1]
            max_length = max(max_length, length)

    return max_length

nums = [1, 3, 2, 2, 5, 2, 3, 7]
print(findLHS(nums))
5
Question 4
You have a long flowerbed in which some of the plots are planted, and some are not.
However, flowers cannot be planted in adjacent plots. Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

Example 1: Input: flowerbed = [1,0,0,0,1], n = 1 Output: true

Algorithm
Initialize a variable count to 0, which will store the count of available spots to plant new flowers.

Iterate over the flowerbed array. If the current plot is 0 (empty) and the previous and next plots (if they exist) are also 0, increment count by 1 and set the current plot to 1 to mark it as planted.

Check if count is greater than or equal to n. If count is greater than or equal to n, return True as it means there are enough available spots to plant the new flowers without violating the rule. Otherwise, return False as there are not enough available spots to plant all n flowers without violating the rule.

def canPlaceFlowers(flowerbed, n):
    count = 0
    length = len(flowerbed)
    i = 0

    while i < length:
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == length - 1 or flowerbed[i + 1] == 0):
            count += 1
            flowerbed[i] = 1
        i += 1

    return count >= n

flowerbed = [1, 0, 0, 0, 1]
n = 1
print(canPlaceFlowers(flowerbed, n))
True
Question 5
Given an integer array nums, find three numbers whose product is maximum and return the maximum product.
Example 1: Input: nums = [1,2,3] Output: 6

Algorithm
1. Sort the array nums in ascending order.
2.Calculate two possible products:
    product1 = nums[0] * nums[1] * nums[-1] (considering the two smallest negative numbers)
    product2 = nums[-1] * nums[-2] * nums[-3] (considering the three largest positive numbers)
Return the maximum of product1 and product2.
def maximumProduct(nums):
    nums.sort()
    product1 = nums[0] * nums[1] * nums[-1]
    product2 = nums[-1] * nums[-2] * nums[-3]
    return max(product1, product2)

nums = [1, 2, 3]
print(maximumProduct(nums))
6
Question 6
Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4

Algorithm
Initialize two pointers, left and right, representing the start and end indices of the array, respectively. Set left to 0 and right to the last index of the array.

While left is less than or equal to right, do the following: Calculate the middle index as mid = (left + right) // 2. If nums[mid] is equal to the target, return mid as the index where the target is found. If nums[mid] is greater than the target, update right to mid - 1 to search in the left half of the array. If nums[mid] is less than the target, update left to mid + 1 to search in the right half of the array.

3.If the target is not found after the while loop, return -1 to indicate that the target does not exist in the array.
def search(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1

    return -1

nums = [-1, 0, 3, 5, 9, 12]
target = 9
print(search(nums, target))
4
Question 7
An array is monotonic if it is either monotone increasing or monotone decreasing.
An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

Example 1: Input: nums = [1,2,2,3] Output: true

Algorithm
Initialize two variables, isIncreasing and isDecreasing, to track if the array is monotone increasing or monotone decreasing, respectively. Set both variables to True initially.
Iterate over the array nums starting from the second element (index 1). If the current element is smaller than the previous element, set isIncreasing to False. If the current element is larger than the previous element, set isDecreasing to False. If both isIncreasing and isDecreasing become False, return False as the array is not monotonic.
3.If the iteration completes without returning False, return True as the array is monotonic.

def isMonotonic(nums):
    isIncreasing = True
    isDecreasing = True

    for i in range(1, len(nums)):
        if nums[i] < nums[i - 1]:
            isIncreasing = False
        if nums[i] > nums[i - 1]:
            isDecreasing = False
        if not isIncreasing and not isDecreasing:
            return False

    return True

nums = [1, 2, 2, 3]
print(isMonotonic(nums))
True
Question 8
You are given an integer array nums and an integer k.
In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

Example 1: Input: nums = [1], k = 0 Output: 0

Algorithm
Find the minimum and maximum elements in the array nums and calculate the initial score as score = max(nums) - min(nums).

If the difference score is already 0, return 0 as the minimum score.

Iterate over the elements in the array nums. For each element num, calculate the minimum and maximum values that can be obtained by applying the operation at most once for that element as min_val = min(num - k, min(nums)) and max_val = max(num + k, max(nums)). Calculate the new score as new_score = max_val - min_val. Update the minimum score if the new score is smaller.

Return the minimum score as the result.

def isMonotonic(nums):
    isIncreasing = True
    isDecreasing = True

    for i in range(1, len(nums)):
        if nums[i] < nums[i - 1]:
            isIncreasing = False
        if nums[i] > nums[i - 1]:
            isDecreasing = False
        if not isIncreasing and not isDecreasing:
            return False

    return True

nums = [1, 2, 2, 3]
print(isMonotonic(nums))
True
 
 
