Question 1
Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three, if there exists an integer x such that n == 3x.

Example 1: Input: n = 27 Output: true Explanation: 27 = 33 Example 2: Input: n = 0 Output: false Explanation: There is no x where 3x = 0. Example 3: Input: n = -1 Output: false Explanation: There is no x where 3x = (-1).

Algorithm
1.If the given number n is less than or equal to 0, return False because negative numbers and zero cannot be powers of three.

2.Calculate the logarithm of n with base 3 using the math.log() function and store it in a variable log_val.

3.Check if the log_val is an integer. You can do this by comparing log_val with its integer representation, int(log_val). If they are equal, return True; otherwise, return False.

import math

def is_power_of_three(n):
    if n <= 0:
        return False
    
    log_val = math.log(n, 3)
    return log_val == int(log_val)
print(is_power_of_three(27))  
print(is_power_of_three(0))   
print(is_power_of_three(-1))  
True
False
False
Question 2
You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:
Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
Keep repeating the steps again, alternating left to right and right to left, until a single number remains.
Given the integer n, return the last number that remains in arr. Example 1: Input: n = 9 Output: 6 Explanation: arr = [1, 2,3, 4,5, 6,7, 8,9] arr = [2,4, 6,8] arr = [2, 6] arr = [6] Example 2: Input: n = 1 Output: 1

Algorithm
1.Initialize a list arr with integers from 1 to n.

2.Initialize a boolean variable left_to_right as True.

3.While the length of arr is greater than 1, perform the following steps:

4.If left_to_right is True, remove every second element starting from the first element.

5.If left_to_right is False, remove every second element starting from the last element.

6.Toggle the value of left_to_right.

7.Return the remaining element in arr.

def last_remaining(n):
    arr = list(range(1, n + 1))
    left_to_right = True

    while len(arr) > 1:
        if left_to_right:
            arr = arr[1::2]
        else:
            arr = arr[-2::-2][::-1]
        left_to_right = not left_to_right

    return arr[0]
print(last_remaining(9)) 
print(last_remaining(1))  
6
1
Question 3
Given a set represented as a string, write a recursive code to print all subsets of it. The subsets can be printed in any order.
Example 1:

Input : set = “abc”

Output : { “”, “a”, “b”, “c”, “ab”, “ac”, “bc”, “abc”}

Example 2:

Input : set = “abcd”

Output : { “”, “a” ,”ab” ,”abc” ,”abcd”, “abd” ,”ac” ,”acd”, “ad” ,”b”, “bc” ,”bcd” ,”bd” ,”c” ,”cd” ,”d” }

Algorithm
1.Define a recursive function backtrack(start, subset):

2.Append subset to the result list.

3.Iterate i over the range start to the length of the set:

4.Call backtrack(i + 1, subset + s[i]) recursively, where s is the input string.

5.Initialize an empty list result to store the subsets.

6.Call the backtrack function with arguments start = 0 and subset = ''.

7.Return the result list.

8.Test the function with the given examples by calling subsets("abc") and subsets("abcd")

def subsets(s):
    def backtrack(start, subset):
        result.append(subset)
        for i in range(start, len(s)):
            backtrack(i + 1, subset + s[i])

    result = []
    backtrack(0, '')
    return result

# Test the function with the given examples
print(subsets("abc"))  # Output: ["", "a", "b", "c", "ab", "ac", "bc", "abc"]
print(subsets("abcd"))  # Output: ["", "a", "ab", "abc", "abcd", "abd", "ac", "acd", "ad", "b", "bc", "bcd", "bd", "c", "cd", "d"]
['', 'a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']
['', 'a', 'ab', 'abc', 'abcd', 'abd', 'ac', 'acd', 'ad', 'b', 'bc', 'bcd', 'bd', 'c', 'cd', 'd']
Question 4
Given a string calculate length of the string using recursion.
Examples: Input : str = "abcd" Output :4

Input : str = "GEEKSFORGEEKS" Output :13

Algorithm
1.Define a recursive function calculateLength(str):

2.If the string str is empty, return 0.

3.Otherwise, return 1 + calculateLength(str[1:]), where str[1:] represents the substring of str excluding the first character.

4.Call the calculateLength function with the input string.

5.The returned value from the function will be the length of the string.

def calculateLength(str):
    if str == "":
        return 0
    else:
        return 1 + calculateLength(str[1:])

# Test the function
print(calculateLength("abcd"))  # Output: 4
print(calculateLength("GEEKSFORGEEKS"))  # Output: 13
4
13
Question 5
We are given a string S, we need to find count of all contiguous substrings starting and ending with same character.
Examples : Input : S = "abcab" Output : 7 There are 15 substrings of "abcab" a, ab, abc, abca, abcab, b, bc, bca bcab, c, ca, cab, a, ab, b Out of the above substrings, there are 7 substrings : a, abca, b, bcab, c, a and b. Input : S = "aba" Output : 4 The substrings are a, b, a and aba

Algorithm
1.Initialize a variable count to 0, which will store the count of valid substrings.

2.Iterate over each character in the given string S:

3.For each character at index i, increment the count by 1.

4.Check for contiguous substrings starting from index i:

5.Start a nested loop to iterate over the characters from index i+1 to the end of the string.

6.For each index j in the nested loop, check if the character at index j is equal to the character at index i.

7.If the characters are equal, increment the count by 1.

8.After the loops, the variable count will contain the count of all contiguous substrings starting and ending with the same character.

def countContiguousSubstrings(S):
    count = 0
    for i in range(len(S)):
        count += 1
        for j in range(i + 1, len(S)):
            if S[j] == S[i]:
                count += 1
    return count

# Test the function
print(countContiguousSubstrings("abcab"))  # Output: 7
print(countContiguousSubstrings("aba"))  # Output: 4
7
4
Question 6
The tower of Hanoi is a famous puzzle where we have three rods
and N disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of discs N. Initially, these discs are in the rod 1. You need to print all the steps of discs movement so that all the discs reach the 3rd rod. Also, you need to find the total moves.Note: The discs are arranged such that the top disc is numbered 1 and the bottom-most disc is numbered N. Also, all the discs have different sizes and a bigger disc cannot be put on the top of a smaller disc. Refer the provided link to get a better clarity about the puzzle. Example 1: Input: N = 2 Output: move disk 1 from rod 1 to rod 2 move disk 2 from rod 1 to rod 3 move disk 1 from rod 2 to rod 3 3 Explanation:For N=2 , steps will be as follows in the example and total 3 steps will be taken. Example 2: Input: N = 3 Output: move disk 1 from rod 1 to rod 3 move disk 2 from rod 1 to rod 2 move disk 1 from rod 3 to rod 2 move disk 3 from rod 1 to rod 3 move disk 1 from rod 2 to rod 1 move disk 2 from rod 2 to rod 3 move disk 1 from rod 1 to rod 3 7 Explanation:For N=3 , steps will be as follows in the example and total 7 steps will be taken.

Algorithm
1.Define a function towerOfHanoi that takes four parameters: N (number of discs), source (source rod), destination (destination rod), and auxiliary (auxiliary rod).

2.Check the base case:

3.If N == 1, move the disc from the source rod to the destination rod, and print the step.

4.Recursively solve the Tower of Hanoi problem for N-1 discs:

5.Move N-1 discs from the source rod to the auxiliary rod using the destination rod as the auxiliary rod.

6.Move the Nth disc from the source rod to the destination rod, and print the step.

7.Recursively solve the Tower of Hanoi problem for N-1 discs:

8.Move N-1 discs from the auxiliary rod to the destination rod using the source rod as the auxiliary rod.

9.The function towerOfHanoi will call itself recursively with updated parameters until the base case is reached.

10.Print the total moves as the count of steps performed.

def towerOfHanoi(N, source, destination, auxiliary):
    if N == 1:
        print("move disk 1 from rod", source, "to rod", destination)
        return 1
    
    moves = towerOfHanoi(N - 1, source, auxiliary, destination)
    print("move disk", N, "from rod", source, "to rod", destination)
    moves += 1
    moves += towerOfHanoi(N - 1, auxiliary, destination, source)
    
    return moves

# Test the function
N = 2
total_moves = towerOfHanoi(N, 1, 3, 2)
print("Total moves:", total_moves)

N = 3
total_moves = towerOfHanoi(N, 1, 3, 2)
print("Total moves:", total_moves)
move disk 1 from rod 1 to rod 2
move disk 2 from rod 1 to rod 3
move disk 1 from rod 2 to rod 3
Total moves: 3
move disk 1 from rod 1 to rod 3
move disk 2 from rod 1 to rod 2
move disk 1 from rod 3 to rod 2
move disk 3 from rod 1 to rod 3
move disk 1 from rod 2 to rod 1
move disk 2 from rod 2 to rod 3
move disk 1 from rod 1 to rod 3
Total moves: 7
Question 7
Given a string str, the task is to print all the permutations of str.
A permutation is an arrangement of all or part of a set of objects, with regard to the order of the arrangement. For instance, the words ‘bat’ and ‘tab’ represents two distinct permutation (or arrangements) of a similar three letter word. Examples: Input: str = “cd” Output: cd dc Input: str = “abb” Output: abb abb bab bba bab bba

Algorithm
1.Define a recursive function permute that takes three parameters: str (the input string), l (the left index of the substring), and r (the right index of the substring).

2.Check the base case:

3.If l == r, it means we have reached the end of the substring, so print the string.

4.For each character at index i in the substring (i ranging from l to r):

5.Swap the characters at indices l and i.

6.Recursively call permute with l+1 as the new left index.

7.Undo the swap to restore the original string.

def permute(str, l, r):
    if l == r:
        print(''.join(str))
    else:
        for i in range(l, r+1):
            str[l], str[i] = str[i], str[l]
            permute(str, l+1, r)
            str[l], str[i] = str[i], str[l]  # Undo the swap

# Test the function
str = "cd"
permute(list(str), 0, len(str)-1)

str = "abb"
permute(list(str), 0, len(str)-1)
cd
dc
abb
abb
bab
bba
bba
bab
Question 8
Given a string, count total number of consonants in it. A consonant is an English alphabet character that is not vowel (a, e, i, o and u). Examples of constants are b, c, d, f, and g.
Examples : Input : abc de Output : 3 There are three consonants b, c and d.

Input : geeksforgeeks portal Output : 12

Algorithm
1.Initialize a variable count to 0 to keep track of the number of consonants.

2.Convert the input string to lowercase to handle both uppercase and lowercase consonants uniformly.

3.Iterate through each character ch in the string:

4.Check if ch is an alphabet and not a vowel (i.e., it is not one of 'a', 'e', 'i', 'o', 'u').

5.If the above condition is true, increment count by 1.

6.Return the value of count as the total number of consonants in the string

def count_consonants(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    count = 0
    for ch in s.lower():
        if ch.isalpha() and ch not in vowels:
            count += 1
    return count

# Test the function
s = "abc de"
print(count_consonants(s))  # Output: 3

s = "geeksforgeeks portal"
print(count_consonants(s))  # Output: 12
3
12
 
